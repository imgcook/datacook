I"¹4<h1 id="linear-regression">Linear Regression</h1>

<p>Linear regression is a classical <strong>supervised learning</strong> algorithm used when target / dependence variable is <strong>continuous real number</strong>. Linear regression fits a linear relationship between dependent variable $y$ and one or more independent variable $X$.</p>

\[y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 +... + \beta_m x_m +\epsilon\]

<p>where $\epsilon$ is the random residual term.</p>

<p>Linear regression model is fitted by minimizing the Mean squared error (MSE) between predicted value $\hat y$ and real target $y$:</p>

\[\min_\beta \sum_{i=1}^n ||\hat y_i - y_i||^2\]

<p>In this implementation of <strong>LinearRegression</strong>, we use stochastic gradient descent (SGD) to minimize MSE. SGD is quite adaptable for most of the cases, whenever your data or feature size is large or small, however it may not be efficient sometimes.</p>

<p>If you want to get statistical inference results for linear regression or more efficient fitting (especially for moderate data and feature size), please refer to <a href="../linear-regression-analysis">LinearRegressionAnalysis</a> model, in which <strong>Ordinary Least Square (OLS)</strong> method is applied.</p>

<h2 id="import">Import</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">Datacook</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">datacook</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">LinearRegression</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Model</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="constructor">Constructor</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">lm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinearRegression</span><span class="p">({</span> <span class="na">optimizerType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">adam</span><span class="dl">'</span> <span class="p">});</span>
</code></pre></div></div>

<h3 id="option-parameters">Option Parameters</h3>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>fitIntercept <code class="language-plaintext highlighter-rouge">optional</code></td>
      <td>boolean</td>
      <td>Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations</td>
    </tr>
    <tr>
      <td>normalize  <code class="language-plaintext highlighter-rouge">optional</code></td>
      <td>boolean</td>
      <td>This parameter is ignored when fit_intercept is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm.</td>
    </tr>
    <tr>
      <td>optimizerType  <code class="language-plaintext highlighter-rouge">optional</code></td>
      <td>â€˜sgdâ€™ | â€˜momentumâ€™ | â€˜adagradâ€™ | â€˜adadeltaâ€™ | â€˜adamâ€™ | â€˜adamaxâ€™ | â€˜rmspropâ€™</td>
      <td>optimizer types for training. All of the following <a href="https://js.tensorflow.org/api/latest/#Training-Optimizers">optimizers types</a> supported in tensorflow.js can be applied. <strong>Default to â€˜adamâ€™</strong></td>
    </tr>
    <tr>
      <td>optimizerProps  <code class="language-plaintext highlighter-rouge">optional</code></td>
      <td>OptimizerProps</td>
      <td>parameters used to init corresponding optimizer, you can refer to <a href="https://js.tensorflow.org/api/latest/#Training-Optimizers">documentations in tensorflow.js</a> to find the supported initailization paratemters for a given type of optimizer. For example, <code class="language-plaintext highlighter-rouge">{ learningRate: 0.1, beta1: 0.1, beta2: 0.2, epsilon: 0.1 }</code> could be used to initialize adam optimizer.</td>
    </tr>
  </tbody>
</table>

<h2 id="methods">Methods</h2>

<h3 id="fit">fit</h3>

<p>Fit linear regression model according to X, y.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">fit</span><span class="p">(</span><span class="nx">xData</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="o">|</span> <span class="nx">RecursiveArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nx">yData</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="o">|</span> <span class="nx">RecursiveArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nx">params</span><span class="p">:</span> <span class="nx">LinearRegerssionTrainParams</span> <span class="o">=</span> <span class="p">{</span> <span class="na">batchSize</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span> <span class="na">epochs</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">})</span>
</code></pre></div></div>

<h4 id="parameters">Parameters</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Parameter</th>
      <th style="text-align: center">type</th>
      <th style="text-align: left">description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">xData</td>
      <td style="text-align: center">Tensor | RecursiveArray<number></number></td>
      <td style="text-align: left">input data of shape (nSamples,nFeatures) in type of array or tensor</td>
    </tr>
    <tr>
      <td style="text-align: left">yData</td>
      <td style="text-align: center">Tensor | RecursiveArray<number></number></td>
      <td style="text-align: left">Tensor like of shape (n_sample, ), input target values</td>
    </tr>
    <tr>
      <td style="text-align: left">params <code class="language-plaintext highlighter-rouge">optional</code></td>
      <td style="text-align: center">LinearRegerssionTrainParams</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">batchSize</code>: batch size: <strong>default = 32</strong>, <code class="language-plaintext highlighter-rouge">maxIterTimes</code>: max iteration times, <strong>default = 20000</strong></td>
    </tr>
  </tbody>
</table>

<h4 id="returns">Returns</h4>

<p><a href="#LinearRegression">LinearRegression</a></p>

<h3 id="trainonbatch">trainOnBatch</h3>

<p>Train your model on batch. If your dataset is large, it could be a better choice than <a href="#fit">fit</a> directly.</p>

<h4 id="parameters-1">Parameters</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Parameter</th>
      <th style="text-align: center">type</th>
      <th style="text-align: left">description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">xData</td>
      <td style="text-align: center">Tensor | RecursiveArray<number></number></td>
      <td style="text-align: left">input data of shape (nSamples,nFeatures) in type of array or tensor</td>
    </tr>
    <tr>
      <td style="text-align: left">yData</td>
      <td style="text-align: center">Tensor | RecursiveArray<number></number></td>
      <td style="text-align: left">Tensor like of shape (n_sample, ), input target values</td>
    </tr>
  </tbody>
</table>

<h4 id="returns-1">Returns</h4>

<p><a href="#LinearRegression">LinearRegression</a></p>

<h3 id="predict">predict</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">predict</span><span class="p">(</span><span class="nx">xData</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="o">|</span> <span class="nx">RecursiveArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Tensor</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="parameters-2">Parameters</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Parameter</th>
      <th style="text-align: center">type</th>
      <th style="text-align: left">description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">xData</td>
      <td style="text-align: center">Tensor | RecursiveArray<number></number></td>
      <td style="text-align: left">input data of shape (nSamples,nFeatures) in type of array or tensor</td>
    </tr>
  </tbody>
</table>

<h4 id="returns-2">Returns</h4>

<p>Tensor of predicted values</p>

<h3 id="getcoef">getCoef</h3>

<p>Get linear regression coefficients</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getCoef</span><span class="p">():</span> <span class="p">{</span> <span class="nl">coefficients</span><span class="p">:</span> <span class="nx">Tensor</span><span class="p">,</span> <span class="nx">intercept</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="p">}</span>
</code></pre></div></div>

<h4 id="returns-3">Returns</h4>

<p>{ coefficients: Tensor, intercept: Tensor }</p>

<h3 id="initmodelfromweights">initModelFromWeights</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">initModelFromWeights</span><span class="p">(</span><span class="nx">inputShape</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> 
    <span class="nx">useBias</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> 
    <span class="nx">weights</span><span class="p">:</span> <span class="p">(</span><span class="nb">Float32Array</span> <span class="o">|</span> <span class="nb">Int32Array</span> <span class="o">|</span> <span class="nb">Uint8Array</span><span class="p">)[]):</span> <span class="k">void</span>
</code></pre></div></div>
<h4 id="parameters-3">Parameters</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Parameter</th>
      <th style="text-align: center">type</th>
      <th style="text-align: left">description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">inputShape</td>
      <td style="text-align: center">number</td>
      <td style="text-align: left">size of input features</td>
    </tr>
    <tr>
      <td style="text-align: left">useBias</td>
      <td style="text-align: center">boolean</td>
      <td style="text-align: left">if use bias</td>
    </tr>
    <tr>
      <td style="text-align: left">weights</td>
      <td style="text-align: center">number[][]</td>
      <td style="text-align: left">weights to initialize</td>
    </tr>
  </tbody>
</table>

<h3 id="fromjson">fromJson</h3>

<p>Load model paramters from json string object</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">fromJson</span><span class="p">(</span><span class="nx">modelJson</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">LinearRegression</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="returns-4">Returns</h4>

<p>LinearRegression</p>

<h3 id="tojson">toJson</h3>

<p>Dump model parameters to json string.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">toJson</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="returns-5">Returns</h4>

<p>Stringfied model parameters</p>

<h2 id="examples">Examples</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<div id="lm-chart">
</div>

<script>
  const { LinearRegression } = datacook.Model;
  const lm = async () => {
    const res = await fetch('/datacook/assets/dataset/linear-sample.csv');
    const content = await res.text();
    const data = content.split('\n').map((d) => {
      const splits = d.split(',');
      const x = parseFloat(splits[0]);
      const y = parseFloat(splits[1]);
      return { x, y };
    }).slice(1);
    const xData = data.map((d) => [ d.x ]);
    const yData = data.map((d) => d.y);
    console.log(datacook);
    console.log(xData);
    const lm = new LinearRegression();
    await lm.fit(xData, yData);
    const coefs = lm.getCoef();
    coefs.coefficients.print();
    coefs.intercept.print();
    const chart = new G2.Chart({
      container: 'lm-chart',
      autoFit: true,
      height: 500,
      syncViewPadding: true,
    });

    // const viewData = data.map(d => )
    const view1 = chart.createView();
    view1.data(data);
    view1.point().position('x*y');
  };
  lm();
</script>

:ET