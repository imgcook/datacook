I"†W<h1 id="multinomial-naive-bayes">Multinomial Naive Bayes</h1>

<p>Naive Bayes model is a classical supervised classification algorithm based on Bayesâ€™ therom. Naive Bayes model applies the independence assumption of conditional probability for feature pairs.</p>

\[P(x_1,...,x_n|y) = P(x_1|y)P(x_2|y)...P(x_n|y)\]

<p>According to Bayesâ€™ therom, the posterior probabiliy of $y$ given $X$ is:</p>

\[P(y|x_1,..,x_n) = \frac{P(y)P(x_1,...,x_n|y)}{p(x_1,x_2...,x_n)}\]

<p>Multinomial Naive Bayes is a classical variant of naive bayes model, and is often used in text classification task. In this model, conditional probability \(P(x_i\|y)\) is approximated by computing the frequency of \(x\) in class \(y\):</p>

\[\hat P(x_i|y) = \frac{N_{yi}+\alpha}{N_y + \alpha n}\]

<p>where \(N_{yi}\) is the number of \(x_i\) appeared in class \(y\), \(n\) is number of features, $\alpha$ is smooth parameter. Larger $\alpha$ often leads to more evenly results for all \(P(x_i\|y)\).</p>

<h2 id="import">Import</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">Datacook</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">datacook</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">MultimonialNB</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Model</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="constructor">Constructor</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mnb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MultimonialNB</span><span class="p">({</span> <span class="na">alpha</span><span class="p">:</span> <span class="mf">0.1</span> <span class="p">});</span>
</code></pre></div></div>

<h3 id="option-parameters">Option parameters</h3>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>alpha</td>
      <td>number</td>
      <td>smooth parameter, set it to a number greater than 0 to avoid overfitting and divide by zero error. larger number leads to more evenly result, <strong>default = 1</strong></td>
    </tr>
  </tbody>
</table>

<h2 id="methods">Methods</h2>

<h3 id="fit">fit</h3>

<p>Training multinomial naive bayes model according to X, y.</p>

<h4 id="syntax">Syntax</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">train</span><span class="p">(</span><span class="nx">xData</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">Tensor</span><span class="p">,</span> <span class="nx">yData</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">Tensor</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">MultinomialNB</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="parameters">Parameters</h4>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>xData</td>
      <td>Tensor | RecursiveArray&lt;number&gt;</td>
      <td>Tensor like of shape (n_samples, n_features), input feature</td>
    </tr>
    <tr>
      <td>yData</td>
      <td>Tensor | Array&lt;any&gt;</td>
      <td>Tensor like of shape (n_sample, ), input target values</td>
    </tr>
  </tbody>
</table>

<h4 id="returns">Returns</h4>

<p>MultinomialNB</p>

<h3 id="predict">predict</h3>

<p>Make predictions using naive bayes model.</p>

<h4 id="syntax-1">Syntax</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">predict</span><span class="p">(</span><span class="nx">xData</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="o">|</span> <span class="nx">RecursiveArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Tensor</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="parameters-1">Parameters</h4>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
      <th>Â </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>xData</td>
      <td>Tensor</td>
      <td>RecursiveArray<number></number></td>
      <td>Input features</td>
    </tr>
  </tbody>
</table>

<h3 id="predictproba">predictProba</h3>

<p>Predict probabilities for each class.</p>

<h4 id="syntax-2">Syntax</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">predictProba</span><span class="p">(</span><span class="nx">xData</span><span class="p">:</span> <span class="nx">Tensor</span> <span class="o">|</span> <span class="nx">RecursiveArray</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Tensor</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="parameters-2">Parameters</h4>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>xData</td>
      <td>Tensor | RecursiveArray<number></number></td>
      <td>Input features</td>
    </tr>
  </tbody>
</table>

<h4 id="returns-1">Returns</h4>

<p>Predicted probabilities</p>

<h3 id="fromjson">fromJson</h3>

<p>Load model paramters from json string object</p>

<h4 id="syntax-3">Syntax</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">fromJson</span><span class="p">(</span><span class="nx">modelJson</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="parameters-3">Parameters</h4>

<table>
  <thead>
    <tr>
      <th>parameter</th>
      <th>type</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>modelJson</td>
      <td>string</td>
      <td>model json string</td>
    </tr>
  </tbody>
</table>

<h3 id="tojson">toJson</h3>

<p>Dump model parameters to json string.</p>

<h4 id="syntax-4">Syntax</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="nx">toJson</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="returns-2">Returns</h4>

<p>string of model json</p>

<h2 id="examples">Examples</h2>

<p>Following is an example about training an naive bayes model for spam email detection task.</p>

<p><a href="../../../examples/text-classification/index.html" class="btn btn-primary fs-5 mb-4 mb-md-0 mr-2">Click here for live demo of this model</a></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">DataCook</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@pipcook/datacook</span><span class="dl">'</span><span class="p">;</span>
<span class="cm">/** if in browser, don't include 'node-fetch' and 'fs' **/</span>
<span class="k">import</span> <span class="nx">fetch</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">node-fetch</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="nx">MultinomialNB</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">NaiveBayes</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">OneHotEncoder</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Encoder</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">CountVectorizer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Text</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">accuracyScore</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">DataCook</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">OneHotEncoder</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://127.0.0.1:4000/datacook/assets/dataset/spam.csv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">));</span>

<span class="kd">const</span> <span class="nx">stopwords</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">i</span><span class="se">\n</span><span class="s1">me</span><span class="se">\n</span><span class="s1">my</span><span class="se">\n</span><span class="s1">myself</span><span class="se">\n</span><span class="s1">we</span><span class="se">\n</span><span class="s1">our</span><span class="se">\n</span><span class="s1">ours</span><span class="se">\n</span><span class="s1">ourselves</span><span class="se">\n</span><span class="s1">you</span><span class="se">\n</span><span class="s1">your</span><span class="se">\n</span><span class="s1">yours</span><span class="se">\n</span><span class="s1">yourself</span><span class="se">\n</span><span class="s1">yourselves</span><span class="se">\n</span><span class="s1">he</span><span class="se">\n</span><span class="s1">him</span><span class="se">\n</span><span class="s1">his</span><span class="se">\n</span><span class="s1">himself</span><span class="se">\n</span><span class="s1">she</span><span class="se">\n</span><span class="s1">her</span><span class="se">\n</span><span class="s1">hers</span><span class="se">\n</span><span class="s1">herself</span><span class="se">\n</span><span class="s1">it</span><span class="se">\n</span><span class="s1">its</span><span class="se">\n</span><span class="s1">itself</span><span class="se">\n</span><span class="s1">they</span><span class="se">\n</span><span class="s1">them</span><span class="se">\n</span><span class="s1">their</span><span class="se">\n</span><span class="s1">theirs</span><span class="se">\n</span><span class="s1">themselves</span><span class="se">\n</span><span class="s1">what</span><span class="se">\n</span><span class="s1">which</span><span class="se">\n</span><span class="s1">who</span><span class="se">\n</span><span class="s1">whom</span><span class="se">\n</span><span class="s1">this</span><span class="se">\n</span><span class="s1">that</span><span class="se">\n</span><span class="s1">these</span><span class="se">\n</span><span class="s1">those</span><span class="se">\n</span><span class="s1">am</span><span class="se">\n</span><span class="s1">is</span><span class="se">\n</span><span class="s1">are</span><span class="se">\n</span><span class="s1">was</span><span class="se">\n</span><span class="s1">were</span><span class="se">\n</span><span class="s1">be</span><span class="se">\n</span><span class="s1">been</span><span class="se">\n</span><span class="s1">being</span><span class="se">\n</span><span class="s1">have</span><span class="se">\n</span><span class="s1">has</span><span class="se">\n</span><span class="s1">had</span><span class="se">\n</span><span class="s1">having</span><span class="se">\n</span><span class="s1">do</span><span class="se">\n</span><span class="s1">does</span><span class="se">\n</span><span class="s1">did</span><span class="se">\n</span><span class="s1">doing</span><span class="se">\n</span><span class="s1">a</span><span class="se">\n</span><span class="s1">an</span><span class="se">\n</span><span class="s1">the</span><span class="se">\n</span><span class="s1">and</span><span class="se">\n</span><span class="s1">but</span><span class="se">\n</span><span class="s1">if</span><span class="se">\n</span><span class="s1">or</span><span class="se">\n</span><span class="s1">because</span><span class="se">\n</span><span class="s1">as</span><span class="se">\n</span><span class="s1">until</span><span class="se">\n</span><span class="s1">while</span><span class="se">\n</span><span class="s1">of</span><span class="se">\n</span><span class="s1">at</span><span class="se">\n</span><span class="s1">by</span><span class="se">\n</span><span class="s1">for</span><span class="se">\n</span><span class="s1">with</span><span class="se">\n</span><span class="s1">about</span><span class="se">\n</span><span class="s1">against</span><span class="se">\n</span><span class="s1">between</span><span class="se">\n</span><span class="s1">into</span><span class="se">\n</span><span class="s1">through</span><span class="se">\n</span><span class="s1">during</span><span class="se">\n</span><span class="s1">before</span><span class="se">\n</span><span class="s1">after</span><span class="se">\n</span><span class="s1">above</span><span class="se">\n</span><span class="s1">below</span><span class="se">\n</span><span class="s1">to</span><span class="se">\n</span><span class="s1">from</span><span class="se">\n</span><span class="s1">up</span><span class="se">\n</span><span class="s1">down</span><span class="se">\n</span><span class="s1">in</span><span class="se">\n</span><span class="s1">out</span><span class="se">\n</span><span class="s1">on</span><span class="se">\n</span><span class="s1">off</span><span class="se">\n</span><span class="s1">over</span><span class="se">\n</span><span class="s1">under</span><span class="se">\n</span><span class="s1">again</span><span class="se">\n</span><span class="s1">further</span><span class="se">\n</span><span class="s1">then</span><span class="se">\n</span><span class="s1">once</span><span class="se">\n</span><span class="s1">here</span><span class="se">\n</span><span class="s1">there</span><span class="se">\n</span><span class="s1">when</span><span class="se">\n</span><span class="s1">where</span><span class="se">\n</span><span class="s1">why</span><span class="se">\n</span><span class="s1">how</span><span class="se">\n</span><span class="s1">all</span><span class="se">\n</span><span class="s1">any</span><span class="se">\n</span><span class="s1">both</span><span class="se">\n</span><span class="s1">each</span><span class="se">\n</span><span class="s1">few</span><span class="se">\n</span><span class="s1">more</span><span class="se">\n</span><span class="s1">most</span><span class="se">\n</span><span class="s1">other</span><span class="se">\n</span><span class="s1">some</span><span class="se">\n</span><span class="s1">such</span><span class="se">\n</span><span class="s1">no</span><span class="se">\n</span><span class="s1">nor</span><span class="se">\n</span><span class="s1">not</span><span class="se">\n</span><span class="s1">only</span><span class="se">\n</span><span class="s1">own</span><span class="se">\n</span><span class="s1">same</span><span class="se">\n</span><span class="s1">so</span><span class="se">\n</span><span class="s1">than</span><span class="se">\n</span><span class="s1">too</span><span class="se">\n</span><span class="s1">very</span><span class="se">\n</span><span class="s1">s</span><span class="se">\n</span><span class="s1">t</span><span class="se">\n</span><span class="s1">can</span><span class="se">\n</span><span class="s1">will</span><span class="se">\n</span><span class="s1">just</span><span class="se">\n</span><span class="s1">don</span><span class="se">\n</span><span class="s1">should</span><span class="se">\n</span><span class="s1">now</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">contents</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="kd">const</span> <span class="nx">labels</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="kd">const</span> <span class="nx">countVectorizer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CountVectorizer</span><span class="p">(</span><span class="nx">contents</span><span class="p">,</span> <span class="nx">stopwords</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countVectorizer</span><span class="p">.</span><span class="nx">wordOrder</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">textVec</span> <span class="o">=</span> <span class="nx">countVectorizer</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">contents</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">mnb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MultinomialNB</span><span class="p">();</span>
<span class="k">await</span> <span class="nx">mnb</span><span class="p">.</span><span class="nx">train</span><span class="p">(</span><span class="nx">textVec</span><span class="p">,</span> <span class="nx">labels</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">yPred</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">mnb</span><span class="p">.</span><span class="nx">predict</span><span class="p">(</span><span class="nx">textVec</span><span class="p">);</span>


<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">accuracy score</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">accuracyScore</span><span class="p">(</span><span class="nx">yPred</span><span class="p">,</span> <span class="nx">labels</span><span class="p">));</span>


<span class="cm">/** save model file, if in browser, don't include following two lines **/</span>
<span class="k">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model.json</span><span class="dl">'</span><span class="p">,</span> <span class="nx">mnb</span><span class="p">.</span><span class="nx">toJson</span><span class="p">(),</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{});</span>
<span class="k">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">./vectorizer.json</span><span class="dl">'</span><span class="p">,</span> <span class="nx">countVectorizer</span><span class="p">.</span><span class="nx">toJson</span><span class="p">(),</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{});</span><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">));</span>

</code></pre></div></div>

:ET